name: GitHub PR Pipeline

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "Repository Name (owner/repo)"
        required: true
      tag_name:
        description: "Tag name to apply"
        required: true
      release:
        description: "Create a release branch"
        type: boolean
      hotfix:
        description: "Create a hotfix branch"
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  process-repo:
    runs-on: ubuntu-latest

    steps:
      - name: Validate Repository Name
        env:
          REPOSITORY: ${{ github.event.inputs.repo_name }}
        run: |
          if [[ ! "$REPOSITORY" == */* ]]; then
            echo "‚ùå ERROR: Repository name must be in 'owner/repo' format."
            exit 1
          fi

      - name: Clone Repository
        env:
          REPOSITORY: ${{ github.event.inputs.repo_name }}
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üöÄ Cloning repository: $REPOSITORY"
          git clone https://x-access-token:${GH_TOKEN}@github.com/$REPOSITORY.git || { echo "‚ùå Repository not found!"; exit 1; }
          cd $(basename "$REPOSITORY")

      - name: Tag the Latest Commit
        env:
          TAG_NAME: ${{ github.event.inputs.tag_name }}
        run: |
          REPO_NAME=$(basename "${{ github.event.inputs.repo_name }}")
          cd $REPO_NAME

          # Ensure develop branch is checked out and up to date
          git fetch origin develop
          git checkout develop
          git pull origin develop

          # Create and push the tag
          latest_commit=$(git rev-parse HEAD)
          git tag "$TAG_NAME" "$latest_commit"
          git push origin --tags
          echo "‚úÖ Tagged latest commit with $TAG_NAME"

      - name: Create Release Branch (if selected)
        if: github.event.inputs.release == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO_NAME=$(basename "${{ github.event.inputs.repo_name }}")
          cd $REPO_NAME

          release_branch="release-$(date +%Y%m%d)"
          git checkout -b "$release_branch"
          git push origin "$release_branch"

          echo "üöÄ Created release branch
