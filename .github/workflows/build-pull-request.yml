name: GitHub PR Pipeline

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "Repository Name (owner/repo)"
        required: true
      tag_name:
        description: "Tag name to apply"
        required: true
      release:
        description: "Create a release branch"
        type: boolean
      hotfix:
        description: "Create a hotfix branch"
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  process-repo:
    runs-on: ubuntu-latest

    steps:
      - name: Validate Repository Name
        run: |
          if [[ ! "${{ github.event.inputs.repo_name }}" == */* ]]; then
            echo "‚ùå ERROR: Repository name must be in 'owner/repo' format."
            exit 1
          fi

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.PATT_TOKEN }}
        run: |
          echo "üîë Logging into GitHub CLI..."
          gh auth status || echo "‚úÖ Using GH_TOKEN for authentication"

      - name: Clone Repository
        env:
          GH_TOKEN: ${{ secrets.PATT_TOKEN }}
        run: |
          echo "üöÄ Cloning repository: ${{ github.event.inputs.repo_name }}"
          git clone https://x-access-token:${GH_TOKEN}@github.com/${{ github.event.inputs.repo_name }}.git
          cd $(basename "${{ github.event.inputs.repo_name }}")

      - name: Tag the Latest Commit
        run: |
          REPO_NAME=$(basename "${{ github.event.inputs.repo_name }}")
          cd $REPO_NAME
          
          git fetch origin develop || echo "‚ö†Ô∏è No 'develop' branch found."
          git checkout develop || echo "‚ö†Ô∏è No 'develop' branch found. Using default branch."
          git pull origin develop || echo "‚ö†Ô∏è Unable to pull 'develop'."
          
          latest_commit=$(git rev-parse HEAD)
          git tag "${{ github.event.inputs.tag_name }}" "$latest_commit"
          git push origin --tags
          echo "‚úÖ Tagged latest commit with ${{ github.event.inputs.tag_name }}"

      - name: Create Release Branch (if selected)
        if: github.event.inputs.release == 'true'
        run: |
          REPO_NAME=$(basename "${{ github.event.inputs.repo_name }}")
          cd $REPO_NAME
          
          release_branch="release-$(date +%Y%m%d)"
          git checkout -b "$release_branch"
          git push origin "$release_branch"
          echo "üöÄ Created release branch: $release_branch"
          
          if ! gh pr view --repo "${{ github.event.inputs.repo_name }}" "$release_branch" --json title; then
            echo "üîÑ Creating PR for release branch..."
            gh pr create --repo "${{ github.event.inputs.repo_name }}" \
              --head "$release_branch" --base develop \
              --title "Release: $release_branch" \
              --body "This is an automated release PR for $release_branch" \
              --assignee "${{ github.actor }}"
          fi

      - name: Create Hotfix Branch (if selected)
        if: github.event.inputs.hotfix == 'true'
        run: |
          REPO_NAME=$(basename "${{ github.event.inputs.repo_name }}")
          cd $REPO_NAME
          
          hotfix_branch="hotfix-$(date +%Y%m%d)"
          git checkout -b "$hotfix_branch"
          git push origin "$hotfix_branch"
          echo "üî• Created hotfix branch: $hotfix_branch"
          
          if ! gh pr view --repo "${{ github.event.inputs.repo_name }}" "$hotfix_branch" --json title; then
            echo "üîÑ Creating PR for hotfix branch..."
            gh pr create --repo "${{ github.event.inputs.repo_name }}" \
              --head "$hotfix_branch" --base develop \
              --title "Hotfix: $hotfix_branch" \
              --body "This is an automated hotfix PR for $hotfix_branch" \
              --assignee "${{ github.actor }}"
          fi
