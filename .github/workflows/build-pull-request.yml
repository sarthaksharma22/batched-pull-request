name: GitHub PR Pipeline

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "Repository Name (owner/name)

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "Repository Name (owner/repo)"
        required: true
      tag_name:
        description: "Tag name to apply"
        required: true
      release:
        description: "Create a release branch"
        type: boolean
      hotfix:
        description: "Create a hotfix branch"
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  process-repo:
    runs-on: ubuntu-latest

    steps:
      - name: Validate Repository Name
        env:
          REPOSITORY: ${{ github.event.inputs.repo_name }}
        run: |
          if [[ ! "$REPOSITORY" == */* ]]; then
            echo "‚ùå ERROR: Repository name must be in 'owner/repo' format."
            exit 1
          fi

      - name: Clone Repository
        env:
          REPOSITORY: ${{ github.event.inputs.repo_name }}
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üöÄ Cloning repository: $REPOSITORY"
          git clone https://x-access-token:${GH_TOKEN}@github.com/$REPOSITORY.git || { echo "‚ùå Repository not found!"; exit 1; }
          cd $(basename "$REPOSITORY")

      - name: Tag the Latest Commit
        env:
          TAG_NAME: ${{ github.event.inputs.tag_name }}
        run: |
          REPO_NAME=$(basename "${{ github.event.inputs.repo_name }}")
          cd $REPO_NAME

          # Ensure develop branch exists and is up to date
          if git rev-parse --verify origin/develop >/dev/null 2>&1; then
            git fetch origin develop
            git checkout develop
            git pull origin develop
          else
            echo "‚ö†Ô∏è No 'develop' branch found, skipping checkout."
          fi

          # Create and push the tag
          latest_commit=$(git rev-parse HEAD)
          git tag "$TAG_NAME" "$latest_commit"
          git push origin --tags
          echo "‚úÖ Tagged latest commit with $TAG_NAME"

      - name: Create Release Branch and PR (if selected)
        if: github.event.inputs.release == 'true'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          REPO_NAME=$(basename "${{ github.event.inputs.repo_name }}")
          cd $REPO_NAME

          release_branch="release-$(date +%Y%m%d)"
          git checkout -b "$release_branch"
          git push origin "$release_branch"
          echo "üöÄ Created release branch: $release_branch"

          # ‚úÖ Create PR for Release Branch using Token
          echo "üîÑ Creating PR for release branch..."
          gh pr create --repo "${{ github.event.inputs.repo_name }}" \
            --head "$release_branch" --base develop \
            --title "Release: $release_branch" \
            --body "This is an automated release PR for $release_branch" \
            --assignee "${{ github.actor }}" \
            --reviewer "${{ github.actor }}" \
            --auth-token "${GH_TOKEN}" \
            || { echo "‚ùå PR creation failed for $release_branch"; exit 1; }

      - name: Create Hotfix Branch and PR (if selected)
        if: github.event.inputs.hotfix == 'true'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          REPO_NAME=$(basename "${{ github.event.inputs.repo_name }}")
          cd $REPO_NAME

          hotfix_branch="hotfix-$(date +%Y%m%d)"
          git checkout -b "$hotfix_branch"
          git push origin "$hotfix_branch"
          echo "üî• Created hotfix branch: $hotfix_branch"

          # ‚úÖ Create PR for Hotfix Branch using Token
          echo "üîÑ Creating PR for hotfix branch..."
          gh pr create --repo "${{ github.event.inputs.repo_name }}" \
            --head "$hotfix_branch" --base develop \
            --title "Hotfix: $hotfix_branch" \
            --body "This is an automated hotfix PR for $hotfix_branch" \
            --assignee "${{ github.actor }}" \
            --reviewer "${{ github.actor }}" \
            --auth-token "${GH_TOKEN}" \
            || { echo "‚ùå PR creation failed for $hotfix_branch"; exit 1; }
repo)"
        required: true
      tag_name:
        description: "Tag name to apply"
        required: true
      release:
        description: "Create a release branch"
        type: boolean
      hotfix:
        description: "Create a hotfix branch"
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  process-repo:
    runs-on: ubuntu-latest

    steps:
      - name: Validate Repository Name
        env:
          REPOSITORY: ${{ github.event.inputs.repo_name }}
        run: |
          if [[ ! "$REPOSITORY" == */* ]]; then
            echo "‚ùå ERROR: Repository name must be in 'owner/repo' format."
            exit 1
          fi

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üîë Logging into GitHub CLI..."
          echo $GH_TOKEN | gh auth login --with-token
          gh auth status || { echo "‚ùå GitHub CLI authentication failed"; exit 1; }

      - name: Clone Repository
        env:
          REPOSITORY: ${{ github.event.inputs.repo_name }}
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üöÄ Cloning repository: $REPOSITORY"
          git clone https://x-access-token:${GH_TOKEN}@github.com/$REPOSITORY.git || { echo "‚ùå Repository not found!"; exit 1; }
          cd $(basename "$REPOSITORY")

      - name: Tag the Latest Commit
        env:
          TAG_NAME: ${{ github.event.inputs.tag_name }}
        run: |
          REPO_NAME=$(basename "${{ github.event.inputs.repo_name }}")
          cd $REPO_NAME

          # Ensure develop branch exists and is up to date
          if git rev-parse --verify origin/develop >/dev/null 2>&1; then
            git fetch origin develop
            git checkout develop
            git pull origin develop
          else
            echo "‚ö†Ô∏è No 'develop' branch found, skipping checkout."
          fi

          # Create and push the tag
          latest_commit=$(git rev-parse HEAD)
          git tag "$TAG_NAME" "$latest_commit"
          git push origin --tags
          echo "‚úÖ Tagged latest commit with $TAG_NAME"

      - name: Create Release Branch and PR (if selected)
        if: github.event.inputs.release == 'true'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          REPO_NAME=$(basename "${{ github.event.inputs.repo_name }}")
          cd $REPO_NAME

          release_branch="release-$(date +%Y%m%d)"
          git checkout -b "$release_branch"
          git push origin "$release_branch"
          echo "üöÄ Created release branch: $release_branch"

          # Create PR for Release Branch
          echo "üîÑ Creating PR for release branch..."
          gh pr create --repo "${{ github.event.inputs.repo_name }}" \
            --head "$release_branch" --base develop \
            --title "Release: $release_branch" \
            --body "This is an automated release PR for $release_branch" \
            --assignee "${{ github.actor }}" \
            --reviewer "${{ github.actor }}" \
            || { echo "‚ùå PR creation failed for $release_branch"; exit 1; }

      - name: Create Hotfix Branch and PR (if selected)
        if: github.event.inputs.hotfix == 'true'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          REPO_NAME=$(basename "${{ github.event.inputs.repo_name }}")
          cd $REPO_NAME

          hotfix_branch="hotfix-$(date +%Y%m%d)"
          git checkout -b "$hotfix_branch"
          git push origin "$hotfix_branch"
          echo "üî• Created hotfix branch: $hotfix_branch"

          # Create PR for Hotfix Branch
          echo "üîÑ Creating PR for hotfix branch..."
          gh pr create --repo "${{ github.event.inputs.repo_name }}" \
            --head "$hotfix_branch" --base develop \
            --title "Hotfix: $hotfix_branch" \
            --body "This is an automated hotfix PR for $hotfix_branch" \
            --assignee "${{ github.actor }}" \
            --reviewer "${{ github.actor }}" \
            || { echo "‚ùå PR creation failed for $hotfix_branch"; exit 1; }
